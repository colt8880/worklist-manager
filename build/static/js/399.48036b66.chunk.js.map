{"version":3,"file":"static/js/399.48036b66.chunk.js","mappings":"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","sources":["components/projects/EditProjectDialog.tsx","components/projects/ProjectList.tsx","utils/dateUtils.ts","components/projects/Projects.tsx","components/common/FileUpload.tsx","components/data-table/DataTable.tsx","components/projects/AddColumnDialog.tsx","components/projects/ProjectContent.tsx","components/projects/NewProjectDialog.tsx","components/projects/ProjectsView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n} from '@mui/material';\n\ninterface EditProjectDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onSave: (name: string) => void;\n  currentName: string;\n}\n\nexport const EditProjectDialog: React.FC<EditProjectDialogProps> = ({\n  open,\n  onClose,\n  onSave,\n  currentName,\n}) => {\n  const [name, setName] = useState(currentName);\n\n  useEffect(() => {\n    setName(currentName);\n  }, [currentName]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (name.trim()) {\n      onSave(name.trim());\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <form onSubmit={handleSubmit}>\n        <DialogTitle>Edit Project Name</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Project Name\"\n            fullWidth\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" variant=\"contained\" disabled={!name.trim()}>\n            Save\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n}; ","import React, { useState, useRef, useEffect } from 'react';\nimport { \n  Box, \n  List, \n  ListItem, \n  ListItemText, \n  IconButton, \n  Menu, \n  MenuItem,\n  Typography,\n  TextField,\n  InputAdornment,\n  Fade\n} from '@mui/material';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { ProjectSummary } from '../../types/project';\nimport { formatDate } from '../../utils/dateUtils';\nimport { EditProjectDialog } from './EditProjectDialog';\n\ninterface ProjectListProps {\n  projects: ProjectSummary[];\n  onOpenProject: (projectId: string) => void;\n  onDeleteProject: (projectId: string) => void;\n  onEditProject: (projectId: string, name: string) => void;\n}\n\n/**\n * SearchBar component for filtering projects\n */\nconst SearchBar: React.FC<{\n  searchTerm: string;\n  isVisible: boolean;\n  onSearch: (term: string) => void;\n  onVisibilityChange: (visible: boolean) => void;\n}> = ({ searchTerm, isVisible, onSearch, onVisibilityChange }) => {\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isVisible && searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, [isVisible]);\n\n  return (\n    <Box sx={{ \n      display: 'flex', \n      alignItems: 'center', \n      mb: 2, \n      gap: 1, \n      position: 'relative',\n      height: 40,\n    }}>\n      <Fade in={!isVisible}>\n        <IconButton \n          onClick={() => onVisibilityChange(true)}\n          sx={{ position: 'absolute', left: 0 }}\n          aria-label=\"Show search\"\n        >\n          <SearchIcon />\n        </IconButton>\n      </Fade>\n      <Fade in={isVisible}>\n        <Box sx={{ \n          maxWidth: { xs: '100%', sm: '50%', md: '25%' },\n          minWidth: '200px',\n          display: 'flex', \n          gap: 1,\n          position: 'absolute',\n          left: 0,\n          transition: 'all 0.3s ease-in-out',\n        }}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            placeholder=\"Search projects...\"\n            value={searchTerm}\n            onChange={(e) => onSearch(e.target.value)}\n            inputRef={searchInputRef}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon color=\"action\" />\n                </InputAdornment>\n              ),\n            }}\n            size=\"small\"\n          />\n          <IconButton \n            onClick={() => {\n              onVisibilityChange(false);\n              onSearch('');\n            }} \n            size=\"small\"\n            aria-label=\"Hide search\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n\n/**\n * ProjectListItem component for rendering individual project items\n */\nconst ProjectListItem: React.FC<{\n  project: ProjectSummary;\n  menuAnchor: HTMLElement | null;\n  onMenuOpen: (event: React.MouseEvent<HTMLElement>) => void;\n  onMenuClose: () => void;\n  onProjectOpen: () => void;\n  onProjectEdit: () => void;\n  onProjectDelete: () => void;\n}> = ({\n  project,\n  menuAnchor,\n  onMenuOpen,\n  onMenuClose,\n  onProjectOpen,\n  onProjectEdit,\n  onProjectDelete,\n}) => (\n  <ListItem\n    onClick={onProjectOpen}\n    sx={{\n      border: '1px solid',\n      borderColor: 'rgba(132, 172, 206, 0.2)',\n      borderRadius: 1,\n      mb: 1,\n      cursor: 'pointer',\n      '&:hover': {\n        backgroundColor: 'rgba(26, 169, 98, 0.04)',\n      },\n    }}\n  >\n    <ListItemText\n      primary={project.name}\n      secondaryTypographyProps={{\n        component: 'div'\n      }}\n      secondary={\n        <Box component=\"span\" sx={{ display: 'flex', gap: 2, color: 'text.secondary', typography: 'body2' }}>\n          <span>Records: {project.recordCount}</span>\n          <span>Updated: {formatDate(project.updatedAt)}</span>\n        </Box>\n      }\n    />\n    <IconButton\n      onClick={(e) => {\n        e.stopPropagation();\n        onMenuOpen(e);\n      }}\n      size=\"small\"\n      aria-label=\"More options\"\n    >\n      <MoreVertIcon />\n    </IconButton>\n    <Menu\n      anchorEl={menuAnchor}\n      open={Boolean(menuAnchor)}\n      onClose={onMenuClose}\n    >\n      <MenuItem onClick={(e) => {\n        e.stopPropagation();\n        onMenuClose();\n        onProjectEdit();\n      }}>\n        Edit\n      </MenuItem>\n      <MenuItem\n        onClick={(e) => {\n          e.stopPropagation();\n          onMenuClose();\n          onProjectDelete();\n        }}\n        sx={{ color: 'error.main' }}\n      >\n        Delete\n      </MenuItem>\n    </Menu>\n  </ListItem>\n);\n\n/**\n * ProjectList component manages the list of projects with search and actions\n */\nexport const ProjectList: React.FC<ProjectListProps> = ({\n  projects,\n  onOpenProject,\n  onDeleteProject,\n  onEditProject,\n}) => {\n  const [menuAnchor, setMenuAnchor] = useState<{ [key: string]: HTMLElement | null }>({});\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [projectToEdit, setProjectToEdit] = useState<{ id: string; name: string } | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isSearchVisible, setIsSearchVisible] = useState(false);\n\n  const filteredProjects = projects.filter(project => \n    project.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <>\n      <SearchBar\n        searchTerm={searchTerm}\n        isVisible={isSearchVisible}\n        onSearch={setSearchTerm}\n        onVisibilityChange={setIsSearchVisible}\n      />\n\n      <List>\n        {filteredProjects.map((project) => (\n          <ProjectListItem\n            key={project.id}\n            project={project}\n            menuAnchor={menuAnchor[project.id]}\n            onMenuOpen={(e) => setMenuAnchor({ [project.id]: e.currentTarget })}\n            onMenuClose={() => setMenuAnchor({ [project.id]: null })}\n            onProjectOpen={() => onOpenProject(project.id)}\n            onProjectEdit={() => {\n              setProjectToEdit({ id: project.id, name: project.name });\n              setEditDialogOpen(true);\n            }}\n            onProjectDelete={() => onDeleteProject(project.id)}\n          />\n        ))}\n        \n        {filteredProjects.length === 0 && (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <Typography color=\"text.secondary\">\n              {searchTerm ? 'No projects match your search' : 'No projects yet'}\n            </Typography>\n          </Box>\n        )}\n      </List>\n\n      {projectToEdit && (\n        <EditProjectDialog\n          open={editDialogOpen}\n          onClose={() => {\n            setEditDialogOpen(false);\n            setProjectToEdit(null);\n          }}\n          onSave={(newName) => {\n            onEditProject(projectToEdit.id, newName);\n            setEditDialogOpen(false);\n            setProjectToEdit(null);\n          }}\n          currentName={projectToEdit.name}\n        />\n      )}\n    </>\n  );\n}; ","export const formatDate = (date: string): string => {\n  return new Date(date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n}; ","import React from 'react';\nimport { Box, Button, Typography, Paper } from '@mui/material';\nimport { ProjectSummary } from '../../types/project';\nimport { ProjectList } from './ProjectList';\nimport AddIcon from '@mui/icons-material/Add';\n\ninterface ProjectsProps {\n  projects: ProjectSummary[];\n  onNewProject: () => void;\n  onOpenProject: (projectId: string) => void;\n  onDeleteProject: (projectId: string) => void;\n  onEditProject: (projectId: string, name: string) => void;\n}\n\n/**\n * EmptyProjectsState component displays when there are no projects\n */\nconst EmptyProjectsState: React.FC<{ onNewProject: () => void }> = ({ onNewProject }) => (\n  <Box \n    sx={{ \n      display: 'flex', \n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: 'calc(100vh - 300px)',\n      textAlign: 'center',\n      px: 2,\n      mt: -8\n    }}\n  >\n    <Paper \n      elevation={0} \n      sx={{ \n        p: 4, \n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        maxWidth: 400,\n        width: '100%',\n        bgcolor: 'transparent'\n      }}\n    >\n      <Typography \n        variant=\"h5\" \n        component=\"h2\" \n        gutterBottom\n        sx={{ \n          mb: 2,\n          color: 'text.primary',\n          fontWeight: 500\n        }}\n      >\n        Create a New Project to Get Started\n      </Typography>\n      <Button\n        variant=\"contained\"\n        size=\"large\"\n        onClick={onNewProject}\n        startIcon={<AddIcon />}\n        sx={{ \n          mt: 2,\n          py: 1.5,\n          px: 4,\n          borderRadius: 2,\n          textTransform: 'none',\n          fontSize: '1.1rem'\n        }}\n      >\n        Add Project\n      </Button>\n    </Paper>\n  </Box>\n);\n\n/**\n * Projects component manages the display of all projects and project-related actions\n */\nexport const Projects: React.FC<ProjectsProps> = ({\n  projects,\n  onNewProject,\n  onOpenProject,\n  onDeleteProject,\n  onEditProject,\n}) => {\n  if (projects.length === 0) {\n    return <EmptyProjectsState onNewProject={onNewProject} />;\n  }\n\n  return (\n    <Box>\n      <Box \n        sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center', \n          mb: 3 \n        }}\n      >\n        <Typography variant=\"h5\">Projects</Typography>\n        <Button \n          variant=\"contained\" \n          onClick={onNewProject}\n          startIcon={<AddIcon />}\n        >\n          New Project\n        </Button>\n      </Box>\n      <ProjectList\n        projects={projects}\n        onOpenProject={onOpenProject}\n        onDeleteProject={onDeleteProject}\n        onEditProject={onEditProject}\n      />\n    </Box>\n  );\n}; ","import React, { useState, useCallback } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  LinearProgress,\n  Alert,\n  Paper \n} from '@mui/material';\nimport { CloudUpload } from '@mui/icons-material';\nimport Papa from 'papaparse';\nimport { DataRecord } from '../../types/datatable';\n\ninterface FileUploadProps {\n  onFileUpload: (data: DataRecord[]) => void;\n}\n\n// Define types for Papa.parse callbacks\ninterface ParseResult {\n  data: any[];\n  errors: { message: string }[];\n  meta: any;\n}\n\ninterface ParseError {\n  message: string;\n  [key: string]: any;\n}\n\n/**\n * FileUpload component that handles CSV file uploads with progress tracking\n * \n * @param onFileUpload - Callback function to handle the uploaded data\n * @returns React component for file uploading with progress bar\n */\nconst FileUpload: React.FC<FileUploadProps> = ({ onFileUpload }) => {\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [progress, setProgress] = useState(0);\n  const [fileSize, setFileSize] = useState(0);\n  const [bytesProcessed, setBytesProcessed] = useState(0);\n\n  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) {\n      setError('No file selected');\n      return;\n    }\n\n    setUploading(true);\n    setError(null);\n    setProgress(0);\n    setFileSize(file.size);\n    setBytesProcessed(0);\n\n    // Create a FileReader to track progress\n    const fileReader = new FileReader();\n    \n    // Track progress during file reading\n    fileReader.onprogress = (event) => {\n      if (event.lengthComputable) {\n        const progressPercent = Math.round((event.loaded / event.total) * 50);\n        setProgress(progressPercent); // First 50% is file reading\n      }\n    };\n\n    fileReader.onload = (event) => {\n      const csvData = event.target?.result as string;\n      \n      // We'll collect all data here\n      const allData: any[] = [];\n      let parseErrors: any[] = [];\n      \n      // Parse the CSV data with progress tracking\n      Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: 'greedy',\n        step: (results, parser) => {\n          // Update progress based on row count\n          if (results.data && typeof results.data === 'object') {\n            allData.push(results.data);\n            \n            // Calculate progress (50-95% range for parsing)\n            const parseProgress = Math.min(95, 50 + Math.round((allData.length / (csvData.length / 100)) * 45));\n            setProgress(parseProgress);\n          }\n          \n          if (results.errors && results.errors.length > 0) {\n            parseErrors = parseErrors.concat(results.errors);\n          }\n        },\n        complete: () => {\n          if (parseErrors.length > 0) {\n            setError(`Error parsing CSV file: ${parseErrors[0].message}`);\n            setUploading(false);\n            return;\n          }\n\n          if (!allData || allData.length === 0) {\n            setError('No data found in file');\n            setUploading(false);\n            return;\n          }\n\n          // Ensure the first row is an object with properties\n          const firstRow = allData[0];\n          if (typeof firstRow !== 'object' || firstRow === null) {\n            setError('Invalid CSV format: First row is not a valid object');\n            setUploading(false);\n            return;\n          }\n\n          // Now we can safely get the headers\n          const headers = Object.keys(firstRow);\n          const invalidRows = allData.some(row => \n            typeof row === 'object' && row !== null && \n            !headers.every(header => Object.prototype.hasOwnProperty.call(row, header))\n          );\n\n          if (invalidRows) {\n            setError('Invalid CSV format: Some rows are missing columns');\n            setUploading(false);\n            return;\n          }\n\n          try {\n            // Set progress to 95% before calling onFileUpload\n            setProgress(95);\n            \n            // Process the data\n            onFileUpload(allData as DataRecord[]);\n            \n            // Complete the progress\n            setProgress(100);\n            setUploading(false);\n          } catch (err) {\n            setError('Failed to process file data');\n            setUploading(false);\n          }\n        },\n        error: (error: ParseError) => {\n          setError(`Error reading file: ${error.message}`);\n          setUploading(false);\n        }\n      });\n    };\n\n    fileReader.onerror = () => {\n      setError('Error reading the file');\n      setUploading(false);\n    };\n\n    // Start reading the file\n    fileReader.readAsText(file);\n  }, [onFileUpload]);\n\n  // Format file size for display\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <Paper \n      sx={{ \n        p: 4, \n        textAlign: 'center',\n        border: '2px dashed rgba(132, 172, 206, 0.3)',\n        backgroundColor: 'rgba(132, 172, 206, 0.05)',\n        transition: 'all 0.2s ease',\n        '&:hover': {\n          borderColor: '#1AA962',\n          backgroundColor: 'rgba(26, 169, 98, 0.05)',\n        }\n      }}\n    >\n      <Box sx={{ mb: 2 }}>\n        <input\n          accept=\".csv\"\n          style={{ display: 'none' }}\n          id=\"file-upload\"\n          type=\"file\"\n          onChange={handleFileUpload}\n        />\n        <label htmlFor=\"file-upload\">\n          <Button\n            variant=\"contained\"\n            component=\"span\"\n            startIcon={<CloudUpload />}\n            disabled={uploading}\n            sx={{\n              backgroundColor: '#1AA962',\n              '&:hover': {\n                backgroundColor: '#158c51',\n              }\n            }}\n          >\n            Upload CSV File\n          </Button>\n        </label>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n          Drag and drop a CSV file here or click to select\n        </Typography>\n      </Box>\n\n      {uploading && (\n        <Box sx={{ width: '100%', mt: 2 }}>\n          <LinearProgress \n            variant=\"determinate\" \n            value={progress} \n            sx={{\n              height: 10,\n              borderRadius: 5,\n              '& .MuiLinearProgress-bar': {\n                borderRadius: 5,\n                backgroundColor: '#1AA962',\n              }\n            }}\n          />\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {progress < 100 ? 'Processing...' : 'Complete!'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {progress}%\n            </Typography>\n          </Box>\n          {fileSize > 0 && (\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              File size: {formatFileSize(fileSize)}\n            </Typography>\n          )}\n        </Box>\n      )}\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\n          {error}\n        </Alert>\n      )}\n    </Paper>\n  );\n};\n\nexport default FileUpload; ","import React, { useMemo } from 'react';\nimport {\n  DataGrid,\n  GridColDef,\n  GridColumnMenuProps,\n  GridColumnMenu,\n  GridRowModel,\n  useGridApiRef,\n  GridCellEditStopParams,\n  GridRenderCellParams,\n  GridEventListener,\n  GridCellEditStopReasons,\n  GridCellParams,\n  GridValueFormatter,\n} from '@mui/x-data-grid';\nimport { MenuItem, Box, Divider, Checkbox } from '@mui/material';\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { CustomColumn } from '../../types/project';\nimport _ from 'lodash';\n\ninterface DataTableProps {\n  data: any[];\n  columns: string[];\n  customColumns: Record<string, any>;\n  onUpdateCell: (rowId: string | number, field: string, value: any) => Promise<any>;\n  onDeleteColumn?: (columnName: string) => void;\n}\n\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  const { hideMenu, colDef } = props;\n\n  const handleDeleteColumn = (event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (window.confirm('Are you sure you want to delete this column? This action cannot be undone.')) {\n      const customEvent = new CustomEvent('deleteColumn', { detail: colDef.field });\n      window.dispatchEvent(customEvent);\n    }\n    const syntheticEvent = { stopPropagation: () => {} } as React.SyntheticEvent;\n    hideMenu(syntheticEvent);\n  };\n\n  return (\n    <div>\n      <GridColumnMenu {...props} />\n      <Divider />\n      <MenuItem \n        onClick={handleDeleteColumn}\n        data-testid=\"delete-column-menu-item\"\n        sx={{\n          padding: '6px 16px',\n          display: 'flex',\n          alignItems: 'center',\n          minHeight: '32px',\n          color: 'error.main',\n          '& .MuiSvgIcon-root': {\n            fontSize: '1.25rem',\n            color: 'error.main',\n            marginRight: 2\n          }\n        }}\n      >\n        <DeleteOutlineIcon />\n        Delete Column\n      </MenuItem>\n    </div>\n  );\n}\n\nexport const DataTable: React.FC<DataTableProps> = ({\n  data,\n  columns,\n  customColumns,\n  onUpdateCell,\n  onDeleteColumn,\n}) => {\n  const apiRef = useGridApiRef();\n\n  // Add IDs to rows if they don't exist and ensure they're strings\n  const rowsWithIds = useMemo(() => {\n    // Log initial data state\n    console.log('Processing rows with IDs:', {\n      dataLength: data.length,\n      hasIds: data.every(row => row.id !== undefined),\n      firstFewRows: data.slice(0, 3)\n    });\n\n    // If all rows already have IDs, just ensure they're strings\n    if (data.every(row => row.id !== undefined)) {\n      return data.map(row => ({\n        ...row,\n        id: String(row.id)\n      }));\n    }\n\n    // If some rows are missing IDs, assign new ones\n    console.warn('Some rows are missing IDs, assigning new ones');\n    return data.map((row, index) => ({\n      ...row,\n      id: row.id !== undefined ? String(row.id) : String(index)\n    }));\n  }, [data]);\n\n  // Handle cell edit stop events\n  const handleCellEditStop: GridEventListener<'cellEditStop'> = (params, event) => {\n    const { id, field, reason } = params;\n    \n    // Only process if edit was committed\n    if (reason === GridCellEditStopReasons.cellFocusOut || \n        reason === GridCellEditStopReasons.enterKeyDown) {\n      console.log('[DataTable] Cell edit stopped:', { id, field, reason });\n      \n      // Get the new value from the editor\n      const newValue = apiRef.current.getCellValue(id, field);\n      console.log('[DataTable] New cell value:', { id, field, newValue });\n      \n      // If the edit was committed, ensure the value is saved\n      // This is a backup for cases where processRowUpdate might not be triggered\n      if (newValue !== undefined) {\n        onUpdateCell(id, field, newValue).catch(error => {\n          console.error('[DataTable] Error updating cell from edit stop event:', error);\n        });\n      }\n    }\n  };\n\n  // Handle row updates\n  const processRowUpdate = React.useCallback(\n    async (newRow: GridRowModel, oldRow: GridRowModel) => {\n      try {\n        // Skip update if no changes\n        if (_.isEqual(newRow, oldRow)) {\n          return oldRow;\n        }\n\n        // Find the changed column by comparing newRow and oldRow\n        const changedColumn = Object.keys(newRow).find(key => \n          key !== 'id' && !_.isEqual(newRow[key], oldRow[key])\n        );\n\n        if (!changedColumn) {\n          console.warn('[DataTable] No changed column found between:', { newRow, oldRow });\n          return oldRow;\n        }\n\n        console.log('[DataTable] Updating cell:', {\n          rowId: newRow.id,\n          column: changedColumn,\n          oldValue: oldRow[changedColumn],\n          newValue: newRow[changedColumn]\n        });\n\n        const result = await onUpdateCell(newRow.id, changedColumn, newRow[changedColumn]);\n        if (!result) {\n          console.warn('[DataTable] Update cell returned no result');\n          return oldRow;\n        }\n\n        const finalResult = {\n          ...result,\n          isNew: false\n        };\n\n        return finalResult;\n      } catch (error) {\n        console.error('[DataTable] Error processing row update:', {\n          error,\n          rowId: newRow.id\n        });\n        return oldRow;\n      }\n    },\n    [onUpdateCell]\n  );\n\n  // Add event listener for column deletion\n  React.useEffect(() => {\n    const handleDeleteColumn = (event: Event) => {\n      const customEvent = event as CustomEvent;\n      onDeleteColumn?.(customEvent.detail);\n    };\n\n    window.addEventListener('deleteColumn', handleDeleteColumn);\n    return () => {\n      window.removeEventListener('deleteColumn', handleDeleteColumn);\n    };\n  }, [onDeleteColumn]);\n\n  // Handle checkbox changes\n  const handleCheckboxChange = React.useCallback(\n    async (params: GridCellParams) => {\n      try {\n        const { id, field, value } = params;\n        const newValue = !value;\n        \n        const result = await onUpdateCell(id, field, newValue);\n        if (!result) {\n          return false;\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('[DataTable] Error handling checkbox change:', {\n          error,\n          params\n        });\n        return false;\n      }\n    },\n    [onUpdateCell]\n  );\n\n  // Column definitions with checkbox handling\n  const columnDefs = useMemo<GridColDef[]>(() => {\n    return columns.map(colName => {\n      const customColumn = customColumns[colName];\n      \n      // Base column definition\n      const baseColDef: GridColDef = {\n        field: colName,\n        headerName: customColumn?.headerName || colName,\n        flex: 1,\n        minWidth: 150,\n        editable: true,\n        description: customColumn?.description || ''\n      };\n\n      // If it's a custom column, add the specific configuration\n      if (customColumn) {\n        if (customColumn.type === 'boolean') {\n          return {\n            ...baseColDef,\n            type: 'boolean' as const,\n            renderCell: (params: GridRenderCellParams) => (\n              <Checkbox\n                checked={Boolean(params.value)}\n                onChange={() => handleCheckboxChange(params)}\n              />\n            )\n          } satisfies GridColDef;\n        }\n\n        if (customColumn.type === 'singleSelect') {\n          return {\n            ...baseColDef,\n            type: 'singleSelect' as const,\n            valueOptions: customColumn.options || [],\n            // Ensure undefined values are converted to empty string and handle null params\n            valueFormatter: (params: { value: any }) => {\n              if (!params) return '';\n              return params.value === undefined || params.value === null ? '' : String(params.value);\n            },\n            renderCell: (params: GridRenderCellParams) => {\n              // Log the cell value for debugging\n              console.log(`[DataTable] Rendering singleSelect cell:`, {\n                id: params.id,\n                field: params.field,\n                value: params.value,\n                valueType: typeof params.value\n              });\n              \n              return (\n                <Box\n                  sx={{\n                    width: '100%',\n                    height: '100%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    cursor: 'pointer',\n                    padding: 0\n                  }}\n                  onClick={(event) => {\n                    event.stopPropagation();\n                    apiRef.current.startCellEditMode({ id: params.id, field: params.field });\n                  }}\n                >\n                  <span style={{ overflow: 'hidden', textOverflow: 'ellipsis', flex: 1, paddingLeft: '8px' }}>\n                    {params.value || ''}\n                  </span>\n                  <ArrowDropDownIcon \n                    sx={{ \n                      color: 'rgba(0, 0, 0, 0.54)',\n                      marginLeft: 1,\n                      marginRight: 1,\n                      fontSize: 20,\n                      flexShrink: 0\n                    }} \n                  />\n                </Box>\n              );\n            }\n          } satisfies GridColDef;\n        }\n      }\n\n      return baseColDef;\n    });\n  }, [columns, customColumns, handleCheckboxChange]);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGrid\n        apiRef={apiRef}\n        rows={rowsWithIds}\n        columns={columnDefs}\n        autoHeight\n        disableRowSelectionOnClick\n        processRowUpdate={processRowUpdate}\n        onProcessRowUpdateError={(error) => {\n          console.error('[DataGrid] Error in row update:', error);\n        }}\n        slots={{\n          columnMenu: CustomColumnMenu,\n        }}\n        editMode=\"cell\"\n        onCellEditStop={handleCellEditStop}\n        sx={{\n          '& .MuiDataGrid-cell': {\n            borderRight: '1px solid rgba(224, 224, 224, 1)',\n          },\n          '& .MuiDataGrid-columnHeader': {\n            borderRight: '1px solid rgba(224, 224, 224, 1)',\n            backgroundColor: 'rgba(0, 0, 0, 0.02)',\n            '& .MuiDataGrid-columnHeaderTitle': {\n              fontWeight: 700\n            }\n          },\n        }}\n      />\n    </Box>\n  );\n}; ","import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n} from '@mui/material';\nimport { ColumnType, CustomColumn } from '../../types/project';\n\ninterface AddColumnDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (column: CustomColumn) => void;\n  existingColumns: string[];\n}\n\nexport const AddColumnDialog: React.FC<AddColumnDialogProps> = ({\n  open,\n  onClose,\n  onAdd,\n  existingColumns,\n}) => {\n  const [column, setColumn] = useState<CustomColumn>({\n    name: '',\n    type: 'string',\n    headerName: '',\n    description: '',\n    options: [],\n    flex: 1,\n    minWidth: 150,\n    editable: true,\n  });\n  const [optionsText, setOptionsText] = useState('');\n\n  const handleSave = () => {\n    if (column.name.trim() && !existingColumns.includes(column.name)) {\n      const finalColumn = {\n        ...column,\n        headerName: column.headerName || column.name,\n        options: column.type === 'singleSelect' ? optionsText.split(',').map(opt => opt.trim()).filter(Boolean) : undefined,\n        valueOptions: column.type === 'singleSelect' ? optionsText.split(',').map(opt => opt.trim()).filter(Boolean) : undefined,\n      };\n      onAdd(finalColumn);\n      setColumn({\n        name: '',\n        type: 'string',\n        headerName: '',\n        description: '',\n        options: [],\n        flex: 1,\n        minWidth: 150,\n        editable: true,\n      });\n      setOptionsText('');\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>Add New Column</DialogTitle>\n      <DialogContent>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>\n          <TextField\n            label=\"Column Name\"\n            value={column.name}\n            onChange={(e) => setColumn({ ...column, name: e.target.value })}\n            error={existingColumns.includes(column.name)}\n            helperText={existingColumns.includes(column.name) ? 'Column name already exists' : ''}\n            required\n          />\n          <TextField\n            label=\"Column Header\"\n            value={column.headerName || ''}\n            onChange={(e) => setColumn({ ...column, headerName: e.target.value })}\n            helperText=\"Display name for the column (optional)\"\n          />\n          <FormControl fullWidth>\n            <InputLabel>Column Type</InputLabel>\n            <Select\n              value={column.type}\n              label=\"Column Type\"\n              onChange={(e) => setColumn({ ...column, type: e.target.value as ColumnType })}\n            >\n              <MenuItem value=\"string\">Text</MenuItem>\n              <MenuItem value=\"boolean\">Checkbox</MenuItem>\n              <MenuItem value=\"singleSelect\">Select List</MenuItem>\n            </Select>\n          </FormControl>\n          {column.type === 'singleSelect' && (\n            <TextField\n              label=\"Options\"\n              value={optionsText}\n              onChange={(e) => setOptionsText(e.target.value)}\n              helperText=\"Enter options separated by commas\"\n              fullWidth\n            />\n          )}\n          <TextField\n            label=\"Description\"\n            value={column.description || ''}\n            onChange={(e) => setColumn({ ...column, description: e.target.value })}\n            helperText=\"Tooltip text shown on hover (optional)\"\n            multiline\n            rows={2}\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          onClick={handleSave}\n          variant=\"contained\"\n          disabled={!column.name.trim() || existingColumns.includes(column.name)}\n        >\n          Add Column\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}; ","import React, { useState } from 'react';\nimport { Box, Typography, IconButton, Menu, MenuItem, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport FileUpload from '../common/FileUpload';\nimport { DataTable } from '../data-table/DataTable';\nimport { DataRecord } from '../../types/datatable';\nimport { AddColumnDialog } from './AddColumnDialog';\nimport { CustomColumn } from '../../types/project';\nimport { projectService } from '../../services/projectService';\nimport { Project } from '../../types/project';\n\ninterface ProjectContentProps {\n  data: DataRecord[];\n  columns: string[];\n  onDataUpdate: (data: DataRecord[], columns: string[]) => void;\n  onClearData: () => void;\n  customColumns: Record<string, CustomColumn>;\n  onAddCustomColumn: (column: CustomColumn) => void;\n  onUpdateData: (rowId: string | number, column: string, value: any) => Promise<DataRecord | null>;\n  currentProject: Project | null;\n  setCurrentProject: (project: Project | null) => void;\n  onBackToProjects: () => void;\n  userId: string;\n}\n\nexport const ProjectContent: React.FC<ProjectContentProps> = ({\n  data,\n  columns,\n  onDataUpdate,\n  onClearData,\n  customColumns,\n  onAddCustomColumn,\n  onUpdateData,\n  currentProject,\n  setCurrentProject,\n  onBackToProjects,\n  userId,\n}) => {\n  const [isAddColumnDialogOpen, setIsAddColumnDialogOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [isConfirmUploadOpen, setIsConfirmUploadOpen] = useState(false);\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleFileUpload = async (uploadedData: DataRecord[]) => {\n    try {\n      if (uploadedData.length > 0) {\n        // Ensure each row has a unique ID\n        const dataWithIds = uploadedData.map((row, index) => ({\n          ...row,\n          id: String(index) // Use index as stable ID for imported data\n        }));\n        \n        const detectedColumns = Object.keys(uploadedData[0]).filter(col => col !== 'id');\n        await onDataUpdate(dataWithIds, detectedColumns);\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n\n  const handleDeleteColumn = async (columnName: string) => {\n    if (currentProject) {\n      try {\n        // Remove column from customColumns if it exists\n        const { [columnName]: deletedColumn, ...remainingCustomColumns } = currentProject.customColumns || {};\n        \n        // Remove column from columns array\n        const updatedColumns = columns.filter(col => col !== columnName);\n        \n        // Remove column data from all records\n        const updatedData = data.map(record => {\n          const { [columnName]: deletedValue, ...remainingData } = record;\n          return remainingData;\n        });\n\n        const updatedProject = {\n          ...currentProject,\n          customColumns: remainingCustomColumns,\n          columns: updatedColumns,\n          data: updatedData,\n          updatedAt: new Date().toISOString()\n        };\n\n        // Save to database\n        const savedProject = await projectService.saveProject(userId, updatedProject);\n        \n        // Update local state\n        setCurrentProject(savedProject);\n        onDataUpdate(updatedData, updatedColumns);\n      } catch (error) {\n        console.error('Failed to delete column:', error);\n      }\n    }\n  };\n\n  const handleUploadNewFile = () => {\n    handleMenuClose();\n    setIsConfirmUploadOpen(true);\n  };\n\n  const handleConfirmUpload = () => {\n    setIsConfirmUploadOpen(false);\n    onClearData();\n  };\n\n  return (\n    <>\n      {data.length === 0 ? (\n        <FileUpload onFileUpload={handleFileUpload} />\n      ) : (\n        <>\n          <Box sx={{ \n            display: 'flex', \n            justifyContent: 'flex-end', \n            alignItems: 'flex-start',\n            mt: -5,\n            mb: 2\n          }}>\n            <IconButton \n              onClick={handleMenuOpen}\n              sx={{ \n                mt: -0.5,\n                p: 0.5\n              }}\n            >\n              <MoreVertIcon />\n            </IconButton>\n            <Menu\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleMenuClose}\n            >\n              <MenuItem onClick={() => {\n                handleMenuClose();\n                setIsAddColumnDialogOpen(true);\n              }}>\n                Add Column\n              </MenuItem>\n              <MenuItem onClick={handleUploadNewFile}>\n                Upload New File\n              </MenuItem>\n            </Menu>\n          </Box>\n          <DataTable\n            data={data}\n            columns={columns}\n            customColumns={currentProject?.customColumns || {}}\n            onUpdateCell={async (rowId, field, value) => {\n              const updatedRow = await onUpdateData(rowId, field, value);\n              return updatedRow;\n            }}\n            onDeleteColumn={handleDeleteColumn}\n          />\n          <AddColumnDialog\n            open={isAddColumnDialogOpen}\n            onClose={() => setIsAddColumnDialogOpen(false)}\n            onAdd={onAddCustomColumn}\n            existingColumns={columns}\n          />\n          <Dialog\n            open={isConfirmUploadOpen}\n            onClose={() => setIsConfirmUploadOpen(false)}\n          >\n            <DialogTitle>Confirm New Upload</DialogTitle>\n            <DialogContent>\n              <Typography>\n                Uploading a new file will delete all existing data in this project. Are you sure you want to continue?\n              </Typography>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => setIsConfirmUploadOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleConfirmUpload} \n                color=\"error\" \n                variant=\"contained\"\n              >\n                Upload New File\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>\n      )}\n    </>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n} from '@mui/material';\n\ninterface NewProjectDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onCreate: (name: string) => void;\n}\n\nexport const NewProjectDialog: React.FC<NewProjectDialogProps> = ({\n  open,\n  onClose,\n  onCreate,\n}) => {\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    if (open) {\n      setName('');\n    }\n  }, [open]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (name.trim()) {\n      onCreate(name.trim());\n      setName('');\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <form onSubmit={handleSubmit}>\n        <DialogTitle>Create New Project</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Project Name\"\n            fullWidth\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" variant=\"contained\" disabled={!name.trim()}>\n            Create\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n}; ","import React, { useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Box, CircularProgress, Alert } from '@mui/material';\nimport { Projects } from './Projects';\nimport { ProjectContent } from './ProjectContent';\nimport { NewProjectDialog } from './NewProjectDialog';\nimport { useAppSelector, useAppDispatch } from '../../store/store';\nimport {\n  fetchProjects,\n  createProject,\n  deleteProject,\n  updateProject,\n  setCurrentProject,\n  clearProjectData,\n  updateProjectData,\n  updateCell,\n  updateCustomColumns,\n} from '../../store/slices/projectsSlice';\nimport { setNewProjectDialogOpen } from '../../store/slices/uiSlice';\nimport { Project, CustomColumn } from '../../types/project';\nimport { projectService } from '../../services/projectService';\nimport { debounce } from 'lodash';\n\nexport const ProjectsView: React.FC = () => {\n  const {\n    projects,\n    currentProject,\n    isLoading,\n    error,\n    data,\n    columns,\n  } = useAppSelector((state) => state.projects);\n  const { isNewProjectOpen } = useAppSelector((state) => state.ui.dialog);\n  const { user } = useAppSelector((state) => state.auth);\n  const dispatch = useAppDispatch();\n  const { projectId } = useParams<{ projectId?: string }>();\n  const navigate = useNavigate();\n  const hasCleared = React.useRef(false);\n\n  useEffect(() => {\n    if (user) {\n      dispatch(fetchProjects(user.id));\n    }\n  }, [dispatch, user]);\n\n  // Handle project loading when URL contains project ID\n  useEffect(() => {\n    if (!projectId) {\n      // Only clear if we haven't already cleared and there's a current project\n      if (!hasCleared.current && currentProject !== null) {\n        dispatch(setCurrentProject(null));\n        dispatch(clearProjectData());\n        hasCleared.current = true;\n      }\n      return;\n    }\n\n    // Reset the cleared flag when we have a projectId\n    hasCleared.current = false;\n\n    // Always fetch fresh project data when navigating to a project\n    const loadProject = async () => {\n      if (!user) return;\n      \n      try {\n        // Fetch fresh project data from the database\n        const freshProject = await projectService.getProject(user.id, projectId);\n        if (freshProject) {\n          dispatch(setCurrentProject(freshProject));\n        } else {\n          navigate('/projects');\n        }\n      } catch (error) {\n        console.error('Failed to load project:', error);\n        navigate('/projects');\n      }\n    };\n\n    loadProject();\n  }, [projectId, user, dispatch, navigate]);\n\n  const handleOpenProject = (id: string) => {\n    navigate(`/projects/${id}`);\n  };\n\n  const handleCreateProject = async (name: string) => {\n    if (!user) return;\n    \n    try {\n      const result = await dispatch(createProject({ name, userId: user.id })).unwrap();\n      dispatch(setNewProjectDialogOpen(false));\n      // Navigate immediately after creation\n      navigate(`/projects/${result.id}`);\n    } catch (error) {\n      console.error('Failed to create project:', error);\n    }\n  };\n\n  const handleDeleteProject = async (id: string) => {\n    if (!user) return;\n\n    try {\n      await dispatch(deleteProject({ userId: user.id, projectId: id })).unwrap();\n      // Only navigate to projects list if we're currently viewing the project being deleted\n      if (projectId === id) {\n        navigate('/projects');\n      }\n    } catch (error) {\n      console.error('Failed to delete project:', error);\n    }\n  };\n\n  const handleEditProject = async (id: string, name: string) => {\n    if (!user) return;\n\n    try {\n      await dispatch(updateProject({ userId: user.id, projectId: id, name })).unwrap();\n    } catch (error) {\n      console.error('Failed to update project:', error);\n    }\n  };\n\n  const handleDataUpdate = async (data: any[], columns: string[]) => {\n    if (!user || !currentProject) return;\n\n    try {\n      await dispatch(updateProjectData({\n        userId: user.id,\n        projectId: currentProject.id,\n        data,\n        columns,\n      })).unwrap();\n    } catch (error) {\n      console.error('Failed to update project data:', error);\n    }\n  };\n\n  const handleCellUpdate = async (rowId: string | number, column: string, value: any) => {\n    if (!user || !currentProject) return null;\n\n    try {\n      console.log('[ProjectsView] Updating cell:', {\n        rowId,\n        column,\n        value,\n        valueType: typeof value\n      });\n\n      // Update Redux state with just the cell change\n      dispatch(updateCell({ rowId, column, value }));\n\n      // Find the existing row\n      const existingRow = data.find(row => row.id === rowId);\n      if (!existingRow) {\n        console.error('[ProjectsView] Row not found:', rowId);\n        return null;\n      }\n\n      // Create updated data array for database save\n      const updatedData = data.map(row => \n        row.id === rowId ? { ...row, [column]: value } : row\n      );\n\n      // Save to database in the background\n      projectService.saveProject(user.id, {\n        ...currentProject,\n        data: updatedData,\n        updatedAt: new Date().toISOString(),\n      }).then(() => {\n        console.log('[ProjectsView] Cell update saved to database successfully');\n      }).catch(error => {\n        console.error('[ProjectsView] Failed to save to database:', error);\n      });\n\n      // Return the updated row with id\n      const updatedRow = {\n        ...existingRow,\n        id: rowId, // Ensure the id is included\n        [column]: value\n      };\n      \n      console.log('[ProjectsView] Returning updated row:', updatedRow);\n      return updatedRow;\n    } catch (error) {\n      console.error('[ProjectsView] Failed to update cell:', error);\n      return null;\n    }\n  };\n\n  const handleBackToProjects = () => {\n    navigate('/projects');\n  };\n\n  const handleAddCustomColumn = async (column: CustomColumn) => {\n    if (!user || !currentProject) return;\n\n    try {\n      // Update custom columns\n      const updatedCustomColumns = {\n        ...currentProject.customColumns,\n        [column.name]: column,\n      };\n\n      // Add new column to columns array\n      const updatedColumns = [...currentProject.columns, column.name];\n      \n      // Create updated project with preserved data\n      const updatedProject = {\n        ...currentProject,\n        customColumns: updatedCustomColumns,\n        columns: updatedColumns,\n        data: currentProject.data, // Preserve existing data\n        updatedAt: new Date().toISOString(),\n      };\n\n      // Save to database first\n      const savedProject = await projectService.saveProject(user.id, updatedProject);\n      \n      // Update Redux state with the saved project\n      dispatch(setCurrentProject(savedProject));\n    } catch (error) {\n      console.error('Failed to add custom column:', error);\n    }\n  };\n\n  // Show loading state only when initially loading projects\n  if (isLoading && !projects.length) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mt: 4 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  // Use URL to determine which view to show\n  if (!projectId) {\n    return (\n      <>\n        <Projects\n          projects={projects.map((p: Project) => ({\n            id: p.id,\n            name: p.name,\n            createdAt: p.createdAt,\n            updatedAt: p.updatedAt,\n            recordCount: p.data.length\n          }))}\n          onNewProject={() => dispatch(setNewProjectDialogOpen(true))}\n          onOpenProject={handleOpenProject}\n          onDeleteProject={handleDeleteProject}\n          onEditProject={handleEditProject}\n        />\n        <NewProjectDialog\n          open={isNewProjectOpen}\n          onClose={() => dispatch(setNewProjectDialogOpen(false))}\n          onCreate={handleCreateProject}\n        />\n      </>\n    );\n  }\n\n  // Show loading state when switching between projects or loading a specific project\n  if (isLoading || !currentProject || currentProject.id !== projectId) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <ProjectContent\n      currentProject={currentProject}\n      data={data}\n      columns={columns}\n      customColumns={currentProject.customColumns}\n      onDataUpdate={handleDataUpdate}\n      onClearData={() => dispatch(clearProjectData())}\n      onAddCustomColumn={handleAddCustomColumn}\n      onUpdateData={handleCellUpdate}\n      onBackToProjects={handleBackToProjects}\n      userId={user?.id || ''}\n      setCurrentProject={(project: Project | null) => dispatch(setCurrentProject(project))}\n    />\n  );\n};\n\nexport default ProjectsView; "],"names":["EditProjectDialog","_ref","open","onClose","onSave","currentName","name","setName","useState","useEffect","_jsx","Dialog","children","_jsxs","onSubmit","e","preventDefault","trim","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","value","onChange","target","DialogActions","Button","onClick","type","variant","disabled","SearchBar","searchTerm","isVisible","onSearch","onVisibilityChange","searchInputRef","useRef","current","focus","Box","sx","display","alignItems","mb","gap","position","height","Fade","in","IconButton","left","SearchIcon","maxWidth","xs","sm","md","minWidth","transition","placeholder","inputRef","InputProps","startAdornment","InputAdornment","color","size","CloseIcon","ProjectListItem","_ref2","project","menuAnchor","onMenuOpen","onMenuClose","onProjectOpen","onProjectEdit","onProjectDelete","ListItem","border","borderColor","borderRadius","cursor","backgroundColor","ListItemText","primary","secondaryTypographyProps","component","secondary","typography","recordCount","date","updatedAt","Date","toLocaleDateString","year","month","day","stopPropagation","MoreVertIcon","Menu","anchorEl","Boolean","MenuItem","ProjectList","_ref3","projects","onOpenProject","onDeleteProject","onEditProject","setMenuAnchor","editDialogOpen","setEditDialogOpen","projectToEdit","setProjectToEdit","setSearchTerm","isSearchVisible","setIsSearchVisible","filteredProjects","filter","toLowerCase","includes","_Fragment","List","map","id","currentTarget","length","textAlign","py","Typography","newName","EmptyProjectsState","onNewProject","flexDirection","justifyContent","minHeight","px","mt","Paper","elevation","p","width","bgcolor","gutterBottom","fontWeight","startIcon","AddIcon","textTransform","fontSize","Projects","onFileUpload","uploading","setUploading","error","setError","progress","setProgress","fileSize","setFileSize","bytesProcessed","setBytesProcessed","handleFileUpload","useCallback","async","_event$target$files","file","event","files","fileReader","FileReader","onprogress","lengthComputable","progressPercent","Math","round","loaded","total","onload","_event$target","csvData","result","allData","parseErrors","Papa","header","skipEmptyLines","step","results","parser","data","push","parseProgress","min","errors","concat","complete","message","firstRow","headers","Object","keys","some","row","every","prototype","hasOwnProperty","call","err","onerror","readAsText","accept","style","htmlFor","CloudUpload","LinearProgress","bytes","i","floor","log","parseFloat","pow","toFixed","formatFileSize","Alert","severity","CustomColumnMenu","props","hideMenu","colDef","GridColumnMenu","_objectSpread","Divider","window","confirm","customEvent","CustomEvent","detail","field","dispatchEvent","padding","marginRight","DeleteOutlineIcon","DataTable","columns","customColumns","onUpdateCell","onDeleteColumn","apiRef","useGridApiRef","rowsWithIds","useMemo","console","dataLength","hasIds","undefined","firstFewRows","slice","String","warn","index","processRowUpdate","React","newRow","oldRow","_","changedColumn","find","key","rowId","column","oldValue","newValue","isNew","handleDeleteColumn","addEventListener","removeEventListener","handleCheckboxChange","params","columnDefs","colName","customColumn","baseColDef","headerName","flex","editable","description","renderCell","Checkbox","checked","valueOptions","options","valueFormatter","valueType","startCellEditMode","overflow","textOverflow","paddingLeft","ArrowDropDownIcon","marginLeft","flexShrink","DataGrid","rows","autoHeight","disableRowSelectionOnClick","onProcessRowUpdateError","slots","columnMenu","editMode","onCellEditStop","handleCellEditStop","reason","GridCellEditStopReasons","cellFocusOut","enterKeyDown","getCellValue","catch","borderRight","AddColumnDialog","onAdd","existingColumns","setColumn","optionsText","setOptionsText","helperText","required","FormControl","InputLabel","Select","multiline","handleSave","finalColumn","split","opt","ProjectContent","onDataUpdate","onClearData","onAddCustomColumn","onUpdateData","currentProject","setCurrentProject","onBackToProjects","userId","isAddColumnDialogOpen","setIsAddColumnDialogOpen","setAnchorEl","isConfirmUploadOpen","setIsConfirmUploadOpen","handleMenuClose","FileUpload","uploadedData","dataWithIds","detectedColumns","col","handleUploadNewFile","columnName","deletedColumn","remainingCustomColumns","_objectWithoutProperties","_toPropertyKey","updatedColumns","updatedData","record","deletedValue","updatedProject","toISOString","savedProject","projectService","saveProject","handleConfirmUpload","NewProjectDialog","onCreate","ProjectsView","isLoading","useAppSelector","state","isNewProjectOpen","ui","dialog","user","auth","dispatch","useAppDispatch","projectId","useParams","navigate","useNavigate","hasCleared","fetchProjects","clearProjectData","freshProject","getProject","loadProject","handleOpenProject","handleCreateProject","createProject","unwrap","setNewProjectDialogOpen","handleDeleteProject","deleteProject","handleEditProject","updateProject","CircularProgress","updateProjectData","updatedCustomColumns","updateCell","existingRow","then","updatedRow","handleBackToProjects","createdAt"],"sourceRoot":""}